using System.IO;
using System.Reflection;
using System.Text;
using Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Resources;
using NUnit.Framework;
using NUnit.Framework.Internal;
using Renci.SshNet;
using Renci.SshNet.Security;
using SshNet.Keygen.Extensions;

namespace SshNet.Keygen.Tests
{
    public class TestKey
    {
        private void KeyGenTest<T>(SshKeyInfo keyInfo)
        {
            for (int i = 0; i < 10; i++)
            {
                var key = SshKey.Generate(keyInfo);
                if (keyInfo.KeyLength != 0)
                    Assert.AreEqual(keyInfo.KeyLength, (key.KeyLength));

                var privateKey = key.ToOpenSshFormat("Generated by SshNet.Keygen");
                var publicKey = key.ToOpenSshPublicFormat("Generated by SshNet.Keygen");
                TestContext.WriteLine($"Run: {i}");
                TestContext.WriteLine(privateKey);
                TestContext.WriteLine(publicKey);

                // File.WriteAllText("test-key", privateKey);
                // File.WriteAllText("test-key.pub", publicKey);

                var keyFile = new PrivateKeyFile(privateKey.ToStream());
                Assert.IsInstanceOf<T>(((KeyHostAlgorithm) keyFile.HostKey).Key);
                if (keyInfo.KeyLength != 0)
                    Assert.AreEqual(keyInfo.KeyLength, (((KeyHostAlgorithm) keyFile.HostKey).Key.KeyLength));
            }
        }

        [Test]
        public void GenerateED25519Key()
        {
            var keyInfo = new SshKeyInfo
            {
                KeyType = KeyType.ED25519
            };
            KeyGenTest<ED25519Key>(keyInfo);
        }

        [Test]
        public void GenerateRSA2048()
        {
            var keyInfo = new SshKeyInfo
            {
                KeyType = KeyType.RSA,
                KeyLength = 2048
            };
            KeyGenTest<RsaKey>(keyInfo);
        }

        [Test]
        public void GenerateRSA3072()
        {
            var keyInfo = new SshKeyInfo
            {
                KeyType = KeyType.RSA,
                KeyLength = 3072
            };
            KeyGenTest<RsaKey>(keyInfo);
        }

        [Test]
        public void GenerateRSA4096()
        {
            var keyInfo = new SshKeyInfo
            {
                KeyType = KeyType.RSA,
                KeyLength = 4096
            };
            KeyGenTest<RsaKey>(keyInfo);
        }

        [Test]
        public void GenerateEcdsa256()
        {
            var keyInfo = new SshKeyInfo
            {
                KeyType = KeyType.ECDSA,
                KeyLength = 256
            };
            KeyGenTest<EcdsaKey>(keyInfo);
        }

        [Test]
        public void GenerateEcdsa384()
        {
            var keyInfo = new SshKeyInfo
            {
                KeyType = KeyType.ECDSA,
                KeyLength = 384
            };
            KeyGenTest<EcdsaKey>(keyInfo);
        }

        [Test]
        public void GenerateEcdsa521()
        {
            var keyInfo = new SshKeyInfo
            {
                KeyType = KeyType.ECDSA,
                KeyLength = 521
            };
            KeyGenTest<EcdsaKey>(keyInfo);
        }

        private string GetKey(string keyname)
        {
            var resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(string.Format("SshNet.Keygen.Tests.TestKeys.{0}", keyname));
            using (var reader = new StreamReader(resourceStream, Encoding.ASCII))
            {
                return reader.ReadToEnd();
            }
        }

        private void TestFormatKey<T>(string keyname)
        {
            var keydata = GetKey(keyname);
            var pubkeydata = GetKey(string.Format("{0}.pub", keyname));
            var keyFile = new PrivateKeyFile(keydata.ToStream());
            var key = ((KeyHostAlgorithm) keyFile.HostKey).Key;

            Assert.IsInstanceOf<T>(key);
            Assert.AreEqual(pubkeydata.Trim(), keyFile.ToOpenSshPublicFormat().Trim());

            // XXX: We cannot test the result of the PrivateKey Export, since Random CheckInts are random...
            // Assert.AreEqual(keydata.Trim(), keyFile.ToOpenSshFormat().Trim());
        }

        [Test]
        public void TestRSA2048()
        {
            TestFormatKey<RsaKey>("RSA2048");
        }

        [Test]
        public void TestRSA3072()
        {
            TestFormatKey<RsaKey>("RSA3072");
        }

        [Test]
        public void TestRSA4096()
        {
            TestFormatKey<RsaKey>("RSA4096");
        }

        [Test]
        public void TestECDSA256()
        {
            TestFormatKey<EcdsaKey>("ECDSA256");
        }

        [Test]
        public void TestECDSA384()
        {
            TestFormatKey<EcdsaKey>("ECDSA384");
        }

        [Test]
        public void TestECDSA521()
        {
            TestFormatKey<EcdsaKey>("ECDSA521");
        }

        [Test]
        public void TestED25519()
        {
            TestFormatKey<ED25519Key>("ED25519");
        }
    }
}